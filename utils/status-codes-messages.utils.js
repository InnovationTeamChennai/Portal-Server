/*
* ========================================================================================
* Copyright (C) ICU Medical, Inc.
* All rights reserved
* ========================================================================================
* Notice: All Rights Reserved.
* This material contains the trade secrets and confidential information of ICU Medical,
Inc.,
* which embody substantial creative effort, ideas and expressions. No part of this
* material may be reproduced or transmitted in any form or by any means, electronic,
* mechanical, optical or otherwise, including photocopying and recording, or in
* connection with any information storage or retrieval system, without written permission
* from:
*
* ICU Medical, Inc.
* 13520 Evening Creek Dr., Suite 200
* San Diego, CA 92128
* www.icumed.com
* ========================================================================================
* File Name: status-codes-messages.utils.js
*
* DESCRIPTION
* This code the status message and error code of enterprose portal.
*
* ========================================================================================
*/
/**************************************************************
 **************** DO NOT EDIT THIS PAGE ************************
 ***************************************************************/

const { Certificate } = require("@fidm/x509")

let SPACING_CODE = "\t"
let SEMICOLON_SPACE = " : " //
let SUCCESS_STRING = "success"
let FAILED_STRING = "failed"

/************************************
 ********** API ERROR CODES **********
 *************************************/

 let API_SCHEMA_ERROR_CODES = {
    ERROR_EC_USERLOGIN : "ERROR_PORTAL_USERLOGIN : ", //1
    ERROR_EC_USERLOGOUT : "ERROR_PORTAL_USERLOGOUT : ",
    ERROR_EC_USER_VALIDATE : "ERROR_PORTAL_USER_VALIDATE : ", //3

    ERROR_PLUGIN_PRIVILIGES : "ERROR_PLUGIN_PRIVILIGES : ",
    ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS : "ERROR_PORTAL_ENBL_DISBL_PLUGIN_SERVCS : ", //
    ERROR_EC_PLGN_NAME_NTFOUND_IN_REQ_HEADERS : "ERROR_PORTAL_PLGN_NAME_NTFOUND_IN_REQ_HEADERS : ",
    ERROR_EC_RESTART_INDV_PLUGIN_SERVCS : "ERROR_PORTAL_RESTART_INDV_PLUGIN_SERVCS : ", //
    ERROR_EC_RESTART_ALL_PLUGIN_SERVCS : "ERROR_PORTAL_RESTART_ALL_PLUGIN_SERVCS : ", //
    ERROR_EC_GET_REGISTERED_PLUGIN_BY_ID : "ERROR_PORTAL_GET_REGISTERED_PLUGIN_BY_ID : ",//
    ERROR_EC_PLUGIN_API : "ERROR_PORTAL_PLUGIN_API : ", //4
    ERROR_DETECTING_PLUGINS : "ERROR_PORTAL_DETECT_PLUGINS : ", //

    ERROR_EC_GET_HRCHY_TREE : "ERROR_PORTAL_GET_HRCHY_TREE : ",// 
    ERROR_EC_GET_LICMNGR_INFO : "ERROR_EC_GET_LICMNGR_INFO : ",
    ERROR_EC_GET_NOTIFICATNMNGR_URL : "ERROR_EC_GET_NOTIFICATNMNGR_URL : ",
    ERROR_EC_GET_EC_CONFG_INFO : "ERROR_EC_GET_EC_CONFG_INFO : ",
    ERROR_EC_EXPRT_ERROR_LOGFILE : "ERROR_EC_EXPRT_ERROR_LOGFILE : ",
    ERROR_EC_SERVER_LOGFILE : "ERROR_EC_SERVER_LOGFILE : ",
    ERROR_EC_GLOBAL_LOGFILE : "ERROR_EC_GLOBAL_LOGFILE : ",

    UPDT_SESSION_EXPIRY : "UPDATE_SESSION_EXPIRY : ",//
    GET_USER_SESSION : "GET_USER_SESSION : ", //
    UPDT_ISAS_ACCESSTOKEN : "UPDATE_ISAS_ACCESSTOKEN : ",//
    FAILED_TO_SEND_NOTIFICATION : "FAILED_TO_SEND_NOTIFICATION : ",
    SUCCESS_TO_SEND_NOTIFICATION : "SUCCESS_TO_SEND_NOTIFICATION : ",
    
    ERROR_INTERNAL_SERVER : "ERROR_PORTAL_INTERNALSW", //2
    ERROR_EC_DBACCESSFAIL : "ERROR_PORTAL_DBACCESSFAIL",//
    ERROR_EC_SERVICES_DISBLD : "ERROR_PORTAL_SERVICES_DISBLD",
    ERROR_EC_SESS_EXP : "ERROR_PORTAL_SESS_EXP",//
    TKN_NOT_FOUND : "TKN_NOT_FOUND",
    ERROR_EC_API_FAIL : "ERROR_PORTAL_API_FAIL",//
    ERROR_PRODUCT_SAME_PART_NO_EXISTS: '!!PRODUCT WITH SAME PRODUCT PART NO. ALREADY EXISTS!!',
    ERROR_PRODUCT_SAME_PART_NO_VERSION_EXISTS: "!!PRODUCT WITH SAME PRODUCT NAME AND VERSION ALREADY EXISTS!!",
    ERROR_FAILED_TO_SAVE_PRODUCT:"FAILED TO SAVE PRODUCT IN TABLE",
    ERROR_FAILED_CERTIFICATE_VALIDATION:'FAILED TO VALIDATE CERTIFICATE',
    ERROR_CERTIFICATE_NOT_VALID: 'CERTIFICATE NOT VALID',
    ERROR_IN_CERTIFICATE_FILE:'ERROR WHILE  WRITING CERTIFICATE DATA INTO FILE ', 
    ERROR_CUSTOMER_SAME_DETAILS_EXISTS:'CUSTOMER WITH SAME DETAILS ALREADY EXISTS',
    ERROR_FAILED_TO_STORE_CUSTOMER: "FAILED TO STORE CUSTOMER DETAILS ", 
    ERROR_CUSTID_NOT_FOUND:'CUSTOMER ID IS NOT AVAILABLE',
    ERROR_IN_GETTING_FILE: 'ERROR IN GETTING KEY FILE',
    ERROR_IN_GET_KEY_FILE_DATA_DB: 'ERRIR IN GET KEY DATA FROM DB',
    FAILED_TO__UPDATE_CUSTOMER:"FAILED TO UPDATE THE CUSTOMER DETAILS IN DATABASE ",
    SAME_CUSTOMER_ALREADY_EXISTS:"!! SAME CUSTOMER DETAILS ARE ALREADY EXISTS",
    CUST_NOT_AVAILABLE: 'CUSTOMER NOT EXISTS',
    HIERARCHY_DATA_NOT_CORRECT:'HIERARCHY DATA IS NOT CORRECT',
    ERROR_IN_GENERATING_TOKEN: 'ERROR IN GENERATING TOKEN',
    ERROR_TOKEN_EXPIRE: '!!TOKEN EXPIRED',
    CUST_ID_NOT_FOUND:'CUSTOMER ID NOT FOUND IN REQUEST BODY',

    ERROR_EC_GET_SITE_PERMISSION : "ERROR_EP_GET_SITE_PERMISSION : ",
    ERROR_APPLICATION_REGISTRATION : "ERROR_EP_APPLICATION_REGISTRATION : ",
    ERROR_MOBILE_APP_REQ_PLUGIN_URLS : "ERROR_EP_MOBILE_APP_PLUGIN_URLS : ",
    ERROR_IN_GET_FILE_DATA:"ERROR IN GET FILE DATA ",
    
    
}

/*******************************
 ********** COMMON MESSAGES **********
 ********************************/
let SERVER_COMMON_ERROR_MSGS = {
    HTTP_ERR_CODE:500,
    EC_INTERNAL_SERVER_DOWN_STATUS_CODE: API_SCHEMA_ERROR_CODES.ERROR_INTERNAL_SERVER, //
    EC_DB_ACCESS_FAIL_STATUS_CODE: API_SCHEMA_ERROR_CODES.ERROR_EC_DBACCESSFAIL,//
    EC_SERVICES_DISABLE_STATUS_CODE: API_SCHEMA_ERROR_CODES.ERROR_EC_SERVICES_DISBLD,
    EC_SESSION_EXPIRED_STATUS_CODE: API_SCHEMA_ERROR_CODES.ERROR_EC_SESS_EXP,//
    EC_TOKEN_NTFOUND_STATUS_CODE: API_SCHEMA_ERROR_CODES.TKN_NOT_FOUND,
    EC_API_FAIL_STATUS_CODE: API_SCHEMA_ERROR_CODES.ERROR_EC_API_FAIL,//
    EC_INTERNAL_SERVER_DWN_MSG: 'Failed to connect server/Serverdown',//
    EC_SESSION_EXPIRED_STATUS_MSG: 'Session Expired',//
    EC_TOKEN_NTFOUND_STATUS_MSG: 'Accesstoken not found in headers',//
    TKN_INVALID: 'Invalid token',
    PLGN_NAME_NTFOUND_IN_REQ: 'Plugin name not found in request',
    REQ_BODY_NTFOUND: 'Body not found in request',
    PLGN_NOT_REGISTERED: 'Plugin not registered',
    PLGN_NOT_FOUND: 'Plugin not found', //
    SECURITY_PLGN_NOT_FOUND: 'Security plugin not found', //
    FAILED_TO_REGISTER: 'Failed to register', //
    REQUIRED_FIELDS_NTFOUND: 'Required fields not found', //
    WRONG_FORMATS_FOUND_IN_REQ: 'Wrong formats found in the request',
    PORTAL_KEY_FILE_NTFOUND: 'Portal key file not found',
    REQUIRED_FIELDS_NTFOUND_IN_SECURITY_PLGN_INFO: 'Required fields not found in the security plugin config info',
    REQUIRED_FIELDS_NTFOUND_IN_LM_PLGN_INFO: 'Required fields not found in the license manager plugin config info',
    REQUIRED_FIELDS_NTFOUND_IN_NM_PLGN_INFO: 'Required fields not found in the notification manager plugin config info',
    COMMON_API_FETCH_REJECT_MSG: 'required fields are missing(requestApi,requestMethod,requestHeaders,requestBody(body is optional))', //
    CREATE_DEFAULT_USR_FOR_EC_API_ERR_MSG: 'Create default user Api not found',
    NODE_NTFOUND: 'Node not found',
    ROOT_NODE_FOUND: 'Root node found',
    FAILED_TO_UPDATE: 'Failed to update',
    MULTIPLE_ROOT_NODES_FOUND: 'More than one root node found in DB, Please ensure only one root should be there in DB',
    ROOT_NODE_MISMATCH_FOUND: 'Root node mismatch found:: CustomerID in key file and root node in DB are not same, if you are trying to add a new Customer please make sure that there is no root node available in your DB',
    USER_PRIVILEG_NO_PERMISION_MSG: ' has no permission to do this action',//
    USER_PRIVILEG_REGSTRATION_WRONG_SCHEMA: 'Privileges schema should have to be (name,key)',
    USER_PRIVILEG_REGSTRATION_WRONG_FORMAT: "Privileges should have to be in Array in configuration file",
    FAILED_UPDATE_SECURITY_TOKEN: 'Failed to update the security accesstoken', //
    NM_PLGN_NOTFOUND_WHILE_SENDG_NOTFCTN: 'Notification plugin not found while sending notification',
    NM_PLGN_SEND_NOTFCTN_ERROR: 'Error while sending notification',
    DUPLICATE_MSG_PROFILEKEY_REGSTRN_IN_NM_PLGN: '  msg profile key is already registered with notification manager',
    NM_PLGN_NTFOUND_WHILE_REGSTRNG_WITH_NM: 'Notification plugin not found while registring with Notification Manager',
    PRIVILEGES_FETCH_FAILED: 'Failed to fetch privileges from security plugin',
    COMMON_API_FETCH_FAILED: 'Failed to fetch from plugin',
    GET_AUTH_TYPE_FAILED: 'Failed to get Authentication type from security plugin',
    UNCAUGHT_ERR:'There was an uncaught error',
    FAILED_TO_UPATED_UICONFIG:"[UI CONFIG FILE] \t FAILED TO UPDATE CONFIG FILE ",
    UICONFIG_UPDATED_SUCCESSFULLY:"[UI CONFIG FILE] \t UPDATED UI CONFIG FILE SUCCESSFULLY",
    DEFAULT_USER_API_NOT_FOUND:'Create Default user Api not found',
    ERROR_SENDING_PLUGIN_DATA:'ERROR IN SENDING PLUGIN DATA',
    COULD_NOT_LOCATE_BINDING_FILE:'Could not locate the bindings file. Tried:',
    COULD_NT_FIND_MODULE:'Could not find module root given file:',
    PACKAGE_JSON_NOT_FOUND:".Do you have a `package.json` file?",
    CUSTOMER_SCHEMA_NOT_MATCH:'Customer Id not match with schema',
    CUSTOMER_ID_REQUIRE:'Customer ID  is required.',
    DOMAIN_SCHEMA_NOT_MATCH:'Domain not match with schema',
    DOMAIN_NAME_REQUIRED:'Domain Name is required.',
    NODE_NAME_SCHEMA_NOT_MATCH:'Node Name Schema Is Not Correct ',
    NODE_NAME_TYPE_NOT_CORRECT:'Node Name be a string.',
    NODE_NAME_REQUIRE:'Node Name is required.',
    EMAIL_SCHEMA_NOT_MATCH:'Email ID is Not match With the Schema',
    EMAIL_IS_REQUIRED:'Email Id is required.',
    TELEPHONE_IS_REQUIRED:'Telephone No is required',
    INTERNATIONAL_NO_REQUIRED:'International Number is required',
    NATIONAL_NO_REQUIRED:'National Number is required',
    E164_REQUIRED:'e164Number is required',
    COUNTRY_CODE_REQUIRED:'CountryCode is required',
    DIALCODE_REQUIRED:'DialCode is required',
    PRODUCT_NAME_SCHEMA_NOT_CORRECT:'Product Name Schema Is Not Correct',
    PRODUCT_NAME_REQUIRED:'Product Name  Is Required',
    PRODUCT_UID_SCHEMA_NOT_MATCH:'Product UID Schema Is Not Correct',
    PRODUCT_UID_REQUIRED:'Product UID Is Required.',
    VERSION_REQUIRED:'Version Is Required.',
    DESRITPTION_REQUIRED:'Description Is Required ',
    FEATURE_ID_SCHEMA_NOT_MATCH:'FeatureID Schema is not correct',
    FEATURE_NAME_SCHEMA_NOT_MATCH:'Feature Name Schema is not correct',
    ID_REQUIRD: 'ID is required ',
    PRIVILEGES_SCHEMA_NOT_MATCH :'Privileges schema should have to be (name,key)',
    PRIVILEGES_SHOULD_BE_IN_ARRAY:"Privileges should have to be in Array in configuration file",
    PRIVILEGES_SCHEMA_WITH_DESC_NOT_MATCH:"Privileges schema should have to be (name,description,key)",
    FAILED_TO_DECRYPT: 'Failed_to_decrypt',
    EMPTY_INPUT_FOUND:'Empty_input_found',
    REQUIRED_FIELD_MISSING:"Required fields('id' or 'type' or 'facilities') are missing in the request",
    ACCESS_TOKEN_EXPIRE:"Accestoken expired",
    TOKEN_NOT_FOUND_IN_HEADER:"Accesstoken not found in headers",
    UUID_NOT_MATCH_WITH_SCHEMA:"UUID is not match with schema Insert correct UID",
    NAME_ID_IS_MISSING: "'name' & 'Id' is missing in the request",
    FAILED_TO_UPDATE_LASTCOMMUNICATED:"FAILED TO UPDATE THE CUSTOMER LAST COMMUNICATED  "
}


/**************************************************************
 ********** ERROR CASE ***************************************
 **************************************************************/



/*************************************************
 ********** API ERROR CODES AND MESSAGES **********
 **************************************************/

 /******
 **  ERROR AND SUCCESS FORMAT = [responseCode, responseMessage, httpStatusCode] 
*******/

let API_ERROR_CODES_AND_MSGS = {
    AUTEHNTICATION_FAILED: [7001, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGIN + "Authentication failed", 401], //
    LOGOUT_FAILED: [7002, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGOUT + "Logout failed", 500],
    LOGOUT_FAILED_WITH_INVALID_TKN: [7003, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGOUT + "Invalid token", 500],
    VALIDATE_USER: [7004, API_SCHEMA_ERROR_CODES.ERROR_EC_USER_VALIDATE + "User token validation failed", 500],
    VALIDATE_USER_WITH_INVALID_TKN: [7005, API_SCHEMA_ERROR_CODES.ERROR_EC_USER_VALIDATE + "Invalid user token", 500], //
    GET_HIERARCHY: [7006,  "Error while Getting Hierarchy", 500],
    CREATE_HIERARCHY: [7007,   "Node With Unique Id Already Exists ", 500],
    CREATE_HIERARCHY_IN_BULK: [7008,  "Customer Id Not Match With Available Customer ", 500],
    CREATE_HIERARCHY_IN_BULK_WRONG_DATA: [7009, "Request body Data is not correct ", 500],
    CREATE_HIERARCHY_IN_BULK_SCHEMA_MISMATCH: [7010, "Request Body Schema mismatch", 500],
 
    GET_HIERARCHY_TREE: [7011, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_HRCHY_TREE + "Error while getting hierarchy Tree", 500], //
    DETECTING_PLUGINS: [7012, API_SCHEMA_ERROR_CODES.ERROR_DETECTING_PLUGINS + "Error while detecting the plugins and their information", 500],
    UPDATE_ENABLE_DISABLE_PLUGIN_SERVICES: [7013, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "Error while updating plugin services", 500], //
    UPDATE_ENABLE_DISABLE_PLUGIN_SERVICES_UID_NTFOUND: [7014, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "Requested uid/uniqueName not found", 500], //
    RESTARTING_ALL_PLUGIN_SERVICES: [7015, API_SCHEMA_ERROR_CODES.ERROR_EC_RESTART_ALL_PLUGIN_SERVCS + "Error while restarting the services", 500], //
    RESTART_INDIVIDUAL_PLUGIN_SERVICES: [7016, API_SCHEMA_ERROR_CODES.ERROR_EC_RESTART_INDV_PLUGIN_SERVCS + "Error while restarting individual plugin services", 500],//
    NO_PLGN_FOUND_RESTART_INDIVIDUAL_PLUGIN_SERVICES: [7017, API_SCHEMA_ERROR_CODES.ERROR_EC_RESTART_INDV_PLUGIN_SERVCS + "No plugin found/ detected", 500], //
    GET_LICENSEMANAGER_INFO: [7018, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_LICMNGR_INFO + "Error while fetching license manager plugin info", 500],
    GET_NOTIFICATION_VIEWER_URL: [7019, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_NOTIFICATNMNGR_URL + "Error while fetching notification manager Ui Url", 500],
    REGISTERED_PLUGIN_BY_ID: [7020, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_REGISTERED_PLUGIN_BY_ID + "Error while fetching registered plugins", 500], //
    REGISTERED_PLUGIN_BY_ID_NOT_FOUND: [7021, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_REGISTERED_PLUGIN_BY_ID + "No plugins found with the requested id", 500],//
    PLUGIN_ID_NOT_FOUND_REGISTERED_PLUGIN: [7022, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_REGISTERED_PLUGIN_BY_ID + "ID not found in the Request", 500], //
    APP_CONFIG_INFO: [7023, API_SCHEMA_ERROR_CODES.ERROR_EC_GET_EC_CONFG_INFO + "Error while getting app config Info", 500],
    EXPORT_ERROR_LOG_FILE: [7024, API_SCHEMA_ERROR_CODES.ERROR_EC_EXPRT_ERROR_LOGFILE + "Error while fetching Error log file", 500],
    EXPORT_EC_SERVER_LOG_FILE: [7025, API_SCHEMA_ERROR_CODES.ERROR_EC_SERVER_LOGFILE + "Error while fetching server log file", 500],
    EXPORT_GLOBAL_LOG_FILE: [7026, API_SCHEMA_ERROR_CODES.ERROR_EC_GLOBAL_LOGFILE + "Error while fetching global api log file", 500],
    PLUGIN_API_REHOST: [7027, API_SCHEMA_ERROR_CODES.ERROR_EC_PLUGIN_API + "All the services are stoped for this request because of either the Licence has expired nor the services are disabled", 300], //
    DB_FETCH: ['', SERVER_COMMON_ERROR_MSGS.EC_DB_ACCESS_FAIL_STATUS_CODE + " : Something went wrong while doing operations with Database", 500], //
    INTERNAL_SW: ['', SERVER_COMMON_ERROR_MSGS.EC_INTERNAL_SERVER_DOWN_STATUS_CODE + " : Something went wrong internally/ Server down", 500], //
    EC_SERVICES_DISABLED: ['', SERVER_COMMON_ERROR_MSGS.EC_SERVICES_DISABLE_STATUS_CODE + " : Services are disabled", 500],
    EC_TOKEN_NTFOUND_IN_HEADERS: ['', SERVER_COMMON_ERROR_MSGS.EC_TOKEN_NTFOUND_STATUS_CODE + " : " + SERVER_COMMON_ERROR_MSGS.EC_TOKEN_NTFOUND_STATUS_MSG, 500],
    EC_SESSION_EXPIRED: ['', SERVER_COMMON_ERROR_MSGS.EC_SESSION_EXPIRED_STATUS_CODE + " : " + SERVER_COMMON_ERROR_MSGS.EC_SESSION_EXPIRED_STATUS_MSG, 500],
    EC_API_FAIL: ['', SERVER_COMMON_ERROR_MSGS.EC_API_FAIL_STATUS_CODE + " : Requested route not found", 404],

    APPLICATION_REGISTER: [7059, API_SCHEMA_ERROR_CODES.ERROR_APPLICATION_REGISTRATION + "Error while doing application registration", 500],
    GET_MOBILE_APP_REQ_PLUGIN_URLS: [7060, API_SCHEMA_ERROR_CODES.ERROR_MOBILE_APP_REQ_PLUGIN_URLS + "Failed to fetch plugin urls", 500],


}



/****************************************
 ********** API SCHEMA ERROR CASE ********
 *****************************************/
let API_SCHEMA_ERROR_CODES_AND_MSGS = {
    AUTH_API_BODY_NTFOUND: [7028, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGIN +  SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    AUTH_API_ACCPT_OBJ_FORMT: [7029, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGIN + "Accepts only Object type in body", 500],
    AUTH_API_USRNAME_NTFOUND: [7030, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGIN + "'userName' is missing in the request or 'userName' has empty value", 500],
    AUTH_API_PASSWORD_NTFOUND: [7031, API_SCHEMA_ERROR_CODES.ERROR_EC_USERLOGIN + "'password' is missing in the request or 'password' has empty value", 500],

    PLGN_NAME_NTFOUND_IN_HEADERS: [7032, API_SCHEMA_ERROR_CODES.ERROR_EC_PLGN_NAME_NTFOUND_IN_REQ_HEADERS + "'name' is missing in headers (Plugin Unique Name)", 500],
    RESATRT_INDVL_PLGN_SERVICES: [7033, API_SCHEMA_ERROR_CODES.ERROR_EC_RESTART_INDV_PLUGIN_SERVCS + "'plugin id' not found in request", 404], //

    ENABLE_DISSABLE_PLGN_SERVICES_API_BDY_NTFOUND: [7034, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    ENABLE_DISSABLE_PLGN_SERVICES_API_WRONG_BODY: [7035, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "Accepted parameters('uid', 'serviceEnabled', 'uniqueName') not found in request", 500],
    ENABLE_DISSABLE_PLGN_SERVICES_API_REQURD_PARAMS_NTFOUND: [7036, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "Required parameters('uid', 'serviceEnabled', 'uniqueName') not found in request", 500],
    ENABLE_DISSABLE_PLGN_SERVICES_API_UID_NTFOUND: [7037, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "value of uid found empty or value should be in string", 500],
    ENABLE_DISSABLE_PLGN_SERVICES_API_SERVENBL_NTFOUND: [7038, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "value of serviceEnabled found empty or value should be in boolean", 500],
    ENABLE_DISSABLE_PLGN_SERVICES_API_UNQNAME_NTFOUND: [7039, API_SCHEMA_ERROR_CODES.ERROR_EC_ENBL_DISBL_PLUGIN_SERVCS + "value of uniqueName found empty or value should be in string or the uniqueName which you are trying to update their services is not allowed to update", 500],

    HRCHY_CREATE_NODE_API_BODY_NTFOUND: [7040,   SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    HRCHY_CREATE_NODE_API_WRONG_TYPE_INFO: [7041,  "Doesn't allow to Same Customer Name in Hierarchy", 500],
    HRCHY_CREATE_NODE_API_WRONG_FORMAT: [7042,  "Email Id should be unique and valid ", 500],
    HRCHY_CREATE_NODE_API_REQURD_FIELDS_MISSING: [7043,  "Required fields are missing in the request", 500],

    HRCHY_UPDT_NODE_API_BODY_NTFOUND: [7044,   SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    HRCHY_UPDT_NODE_API_WRONG_PARAMS: [7045,  "Accepted parameters('uid', 'nodeType', 'typeOf', 'nodeName', 'nodeInfo') not found in request", 500],
    HRCHY_UPDT_NODE_API_REQURD_PARAMS_NTFOUND: [7046,  "Required parameters not found in request", 404],
    HRCHY_UPDT_NODE_API_UID_NTFOUND: [7047,  "value of 'uid' found empty", 404],
    HRCHY_UPDT_NODE_API_NODETYPE_NTFOUND: [7048,  "value of 'nodeType' found empty", 404],
    HRCHY_UPDT_NODE_API_NODENAME_NTFOUND: [7049,  "value of 'nodeName' found empty", 404],
    HRCHY_UPDT_NODE_API_NODEINFO_NTFOUND: [7050, "value of 'nodeInfo' in the request found empty or in a wrong datatype format", 404],
    HRCHY_UPDT_NODE_API_TYPEOF_NTFOUND: [7051,  "value of 'typeOf' in the request found empty", 404],
   
    HRCHY_ADD_ELEMENT_API_BODY_NTFOUND: [7052,   SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    HRCHY_ADD_ELEMENT_API_BODY_SIZE: [7053, API_SCHEMA_ERROR_CODES.ERROR_EC_ADD_ELEMENT + "Request accepts only 3 parameters in the body", 500],
 
    HRCHY_GET_ELEMENT_API_UID_NTFOUND: [7054,  "'CustomerId' not found in request", 404],

    HRCHY_REMOVE_ELEMENT_API_BODY_NTFOUND: [7055, SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
  
  
    APPLICATION_REGISTARTION_API_BODY_NTFOUND: [7056, API_SCHEMA_ERROR_CODES.ERROR_APPLICATION_REGISTRATION + SERVER_COMMON_ERROR_MSGS.REQ_BODY_NTFOUND, 404],
    APPLICATION_REGISTARTION_API_WRONG_BODY: [7057, API_SCHEMA_ERROR_CODES.ERROR_APPLICATION_REGISTRATION + "wrong format found in the request", 500],
    APPLICATION_REGISTARTION_API_REQUIRD_FIELDS_NTFOUND: [7058, API_SCHEMA_ERROR_CODES.ERROR_APPLICATION_REGISTRATION + " Required fields not found or requested body schema found as invalid", 404],

}



/*******************************
 ********** SUCCESS CASE ********
 ********************************/

// let API_SUCCESS_CODE_AND_MSG = {
//     HTTP_SUCCESS_CODE: 200,

// }

let API_SUCCESS_CODE_AND_MSG = [0, SUCCESS_STRING, 200]


/******************************************
 ********** LOGS CODES & MESSAGES ********
 ******************************************/
let EC_LOGS_COMMON_MSG = {
 
    SERVER_INITIALIZED : "EC server initialized",
    SERVER_STARTED_LISTENING_ON : "PORTAL Server started and listnenig on port",
    DETECT_AVAILABLE_PLUGINS : "Detect available plugins",
    CHECK_PLUGINS_STATUS_CONFIG : "Check detected plugins status and their config info",
    PLUGINS_NOT_AVAILABLE : "No plugins found to be in active or config files not found in specified plugins folder path",
    PLUGINS_WITH_CONFIGINFO : "Detected plugins with config info",//
    REMOVE_FROM_HASH_DISABLE_IN_DB : "Remove from hash and disable in DB if plugin is already available in any of these", //
    DISABLE_PLGN_SERVCS_IN_DB : "Disable plugin services in DB", //
    DISABLE_PLGN_SERVCS_IN_HASH : "Disabling plugin services from hash",
    CHECK_SECURITY_PLUGIN_AVAILABILE : "Check is security plugin available",
    SECURITY_PLUGIN_FOUND : "Security plugin found",
    SECURITY_PLUGIN_NTFOUND : "Security plugin not found",
    REGISTER_EC_APP_WITH_SECURITY_PLGN : "Register Ec application with Security plugin",
    REGISTER_SAVE_EC_APP_WITH_SECURITY_PLGN : "Registered and saved Ec application with Security plugin",
    LM_PLGN_FOUND : "License manager plugin found",
    LM_PLGN_NTFOUND : "License manager plugin not found",
    CHECK_ROOT_NODE_AVAILABILITY : "Checking root node availability ",
    CHECK_PLGN_CONFIG_IN_DB : "Check plugin config info in DB", //
    CHECK_PLGN_CONFIG_RESP_FROM_DB : "Check plugin config info response from DB", //
    UPDATE_PLGN_CONFIG_IN_DB : "Updating plugin config info in DB", //
    SAVE_NEW_PLGN_CONFIG_IN_DB : "Saving as a new plugin config info in DB", //
    GET_LM_CONFIG_INFO : "Get license manager plugin config info",
    SEQUELIZE_SYNC : "Sync with DB(Sequelize sync) ",
    CHECK_REQUIRED_PLGNS : "Check required plugins of EC ",
    LM_NOT_AVAILABLE_IN_DB : "License manager plugin not available in DB",
    DUMP_PORTAL_LICENSES_TO_LM : "Dump portal licenses to local LM",
    DUMP_PORTAL_LICENSES_TO_LM_API_RESP : "Dump portal licenses to local LM API response",
    API_TO_GET_LICENSE_FROM_PORTAL : "API for getting licenses from portal",
    GET_CUST_ID_FROM_KEY_FILE : "Getting portal key file to get customer ID",
    APP_REGISTARTION_WITH_SECURITY_PLUGIN : "Application registration with Security plugin",
    CHECK_IS_NEW_REGISTRED_APP : "Check is new registered Application",//
    REGISTERED_APP_FOUND : "Application found as already registered in DB",//
    REGISTERED_APP_NTFOUND : "Application not found in DB",//
    SAVE_REGISTERED_APP : "Save registered application",
    RESTART_INDVIDUAL_PLUGIN_SERVICES : "Restart individual plugin services",//
    CHECK_LICENSE_FOR_PLUGIN : "Check license for plugin",
    GET_APP_ID_SECRET : "Get EC appId and secret",
    GET_LIST_OF_PLUGINS_FROM_DB : "Get list of plugins from DB response",
    GET_ROOT_NODES_FROM_DB : "Get root node(s) from DB",
    CUST_ID_NTFOUND_CREATING_NEW_NODE : "Customer ID as root node not found, Creating a new root Node",
    CREATE_NEW_ROOT_NODE : "Creating a new root Node",
    GET_PLUGIN_CONFIG_INFO : "Get config info of plugin",//
    CREATE_API_TO_POST_EC_INFO : "Create API for posting the EC details ", // 
    GET_SECURITY_PLGN_FROM_DB : "Get security plugin info from DB", 
    CREATE_DEFAULT_USER_REQ_BODY : "Create default user request body" , //
    REGISTER_WITH_NM_API_RESPONSE : "Register with notification manager api response" ,
    ALREADY_APP_REGISTERED_WITH_NM_WITH_MSG_PROFILE_KEY : "Already application was registered with same Msag profile key" ,
    INITIAL_STEPS_WITH_LICENSEMNGR : "Initial steps with license manager plugin ",
    INITIAL_STEPS_WITH_SECURITY_PLUGIN : "Initial steps with security plugins ",
    CREATE_DEFAULT_USR_FOR_EC : "Create default user for PORTAL in security plugin ",
    RGSTR_EC_WITH_NOTIFICATIONMNGR_SERVER_ALERTS : "Register Ec with notification manager plugin for internal server alerts ",
    RGSTR_EC_WITH_NOTIFICATIONMNGR_AUTH_ALERTS : "Register Ec with notification manager plugin for authentication alerts ",
    PERIODIC_SYNC : "Periodic syncs ",
    GET_HIERARCHY_TREE_INFO : "Get hierarchy tree info",
    GET_PORTAL_ACCESSTKN : "Get portal access token",
    SYNC_WITH_PORTAL : "Syncing with portal",
    STEP_OF_START_SYNC_WITH_PORTAL : "After starting of EC a step to sync with portal, From now EC will sync with portal fro every",
    SYNC_PORTAL_FOR_EVERY : "Syncing with portal for every",
    ADD_PRODUCT_API: "IN PRODUCT API",
    EDIT_PRODUCT_API:"IN EDIT PRODUCT API",
    DELETE_PRODUCT_API:'IN DELETE PRODUCT API',
    IN_GET_PRODUCT_LIST:'IN GET PRODUCT LIST',
    PRODUCT_SAVED_SUCCESSFULLY : "PRODUCT DETAILS SAVED SUCCESSFULLY",
    VALIDATING_PRODUCT_PARTNO_VERSION:"VALIDATING PRODUCT PARTNO AND  VERSION",
    PRODUCT_UPDATED_SUCCESSFULLY: "PRODUCT UPDATED SUCCESSFULLY",
    PRODUCT_DELT_SUCCESSFULLY: "PRODUCT DELETED SUCCESSFULLY",
    PRODUCT_ALREADY_EXISTS:"SAME PRODUCT ALREADY EXISTS IN DATABSE",
    PRODUCT_VALIDATED_SUCCESSFULLY:"PRODUCT VALIDATED SUCCESSFULLY",
    PRODUCT_LIST_SENT_SUCCESSFULLY:' PRODUCT LIST SEND SUCCESSFULLY',
    FEATURE_LIST_SENT_SUCCESSFULLY:' FEATURE LIST SEND SUCCESSFULLY',
    PUST_DATA_TO_LICENSE_MANAGER_API:'IN PUST DATA TO LICENSE MANAGER API',
    IN_CERTIFICATE_VALIDATE_API: 'IN CERTIFICATE VALIDATE API',
    CERTIFICATE_VALIDATED_SUCCESSFULLY:'CERTIFICATE IS  VALIDATED SUCCESSFULLY',
    ADD_CUSTOMER_API:'IN ADD CUSTOMER API',
    CUSTOMER_DETAILE_SAVE_SUCCESSFULLY:'CUSTOMER DETAILS STORED SUCCESSFULLY IN DATABASE',
    IN_GET_FILE_DATA: 'IN GET FILE DATA ',
    CUSTOMER_DETAILS_FOR_GEN_KEY: 'CUSTOMER DETAILS COME FROM DATABASE FOR GENERTAE KEY ',
    FILE_GENERATED_SUCCESSFULLY:'FILE GENERATED SUCCESSFULLY',
    IN_UPDATE_CUST_API: 'IN UPDATE CUSTOMER API',
    NO_CHANGE_IN_CERT_FILE: 'NO CHANGE IN CERTIFICATE FILE',
    CUST_UPDATE_SUCCESSFULLY:'CUSTOMER UPDATED SUCCESSFULLY',
    IN_POST_HIERARCHY: 'IN POST HIERARCHY',
    IN_GET_CUSTOMER_LIST:'IN GET CUSTOMER LIST',
    IN_GET_TOKEN:'IN GET TOKEN API',
    IN_GET_LICENSED_PRODUCT:'IN  GET LICENSED PRODUCT',
    IN_GENERATE_TOKEN:'IN GENERATE TOKEN',
    TOKEN_SUCCESSFULLY_VERIFIED: 'TOKEN SUCCESSFULLY VERIFIED',
    IN_VALIDATE_CUST: 'IN VALIDATE CUSTOMER',
    CUSTOMER_VALIDATE_SUCCESS:'CUSTOMER IS VARIFIED SUCCESSFULLY.',
    IN_GET_HIERARCHY_TREE:"IN GET HIERARCHY TREE API",
    IN_GET_CUSTOMER_LIST:"IN GET CUSTOMER LIST API",
    IN_CREATE_FAKE_ROOT:"IN CREATE FAKE ROOT DATA COME FROM INSTALLATIONS",
    IN_GET_LAS_INFO:'IN GET LSA INFO ',
    PLUGIN_DATA_SENT_SUCCESS:'PLUGIN DATA SENT SUCCESSFULLY',
    IN_GENERATE_PRODUCT_FOR_LM:'IN GENERATE PRODUCT FOR LICENSE MANAGER',
    IN_GENERATE_FEATURE_FOR_LM:'IN GENERATE FEATURE FOR LICENSE MANAGER',
    IN_LOGIN: 'IN LOGIN API ',
    IN_GET_AUTH_SECURITY_PLGN: 'IN  GET AUTHENTICATION SECURITY PLUGIN',
    CREATE_SESSION:'IN CREATE SESSION ',
    ERROR_CREATE_SESSION:'ERROR IN  CREATING SESSION',
    IN_LOGOUT: 'IN LOGOUT API',
    IN_VALIDATE_APP_WITH_ISAS:'INSIDE VALIDATE APPLICATION WITH ISAS TOKEN API',
    IN_GET_APP_PRE_INFO:'INSIDE GET APP PRE CONFIG INFO',
    IN_CHECK_VALIDATOR:'COMING TO CHECK VALID USER',
    LAST_COMMUNICATED_UPDATED:" CUSTOMER LastCommunicated Update Successfully"

  


    
}

let EC_LOGS = {

    HEADING: {
        SERVER_FAILS: "[SERVER FAILED]" + SPACING_CODE,
        DELETE_SESSIONS_AFTER_RESTART: "[DELETE SESSIONS]" + SPACING_CODE,
        INITIALIZATION: "[PORTAL-INITIALIZATION]" + SPACING_CODE,
        SEQUELIZE_DB_SYNC : "[DB SYNC]" + SPACING_CODE,
        CHECK_ROOT_NODE_AVALBLTY : "[ROOT NODE AVAILABILITY]" + SPACING_CODE,
        DETECT_AVALBL_PLUGINS : "[DETECT AVAILABLE PLUGINS]" + SPACING_CODE, //
        PLGN_CONFIG_REQ : "[PLUGIN CONFIG INFO REQUEST]" + SPACING_CODE,
        REMOVE_FROM_HASH : "[DISABLE FROM HASH TABLE]" + SPACING_CODE, //
        DISABLE_PLGN_SRVCES : "[DISABLE PLUGIN SERVICES]" + SPACING_CODE, //
        REQUIRED_PLUGINS_FOR_EC : "[REQUIRED PLUGINS FOR EC]" + SPACING_CODE,
        SECURITY_PLUGIN_AVAILABILITY : "[SECURITY PLUGIN AVAILABILITY]" + SPACING_CODE,//
        PLUGIN_CONFIG_IN_DB : "[PLUGIN CONFIG INFO]" + SPACING_CODE, //
        REGISTRATION_WITH_SECURITY_PLGN : "[REGISTRATION WITH SECURITY PLUGIN]" + SPACING_CODE, //
        SAVE_REGISTER_APP_IN_DB : "[SAVE REGISTERED APP IN DB]" + SPACING_CODE, //
        LICENSEMNGR_AVAILABILITY : "[LICENSE MANAGER PLUGIN AVAILABILITY]" + SPACING_CODE,
        NOTIFICATIONMNGR_AVAILABILITY : "[NOTIFICATION MANAGER PLUGIN AVAILABILITY]" + SPACING_CODE,
        INITIAL_STEPS_WITH_LICENSEMNGR : "[INITIAL STEPS WITH LICENSE MANAGER]" + SPACING_CODE, //
        GET_LICENSE_FROM_PORTAL : "[GET LICENSES FROM PORTAL]" + SPACING_CODE,
        GET_PORTAL_ACCESSTOKEN : "[GET PORTAL ACCESSTOKEN]" + SPACING_CODE,
        DUMP_LICENSES_TO_LOCAL_LM : "[DUMP PORTAL LICENSE TO LOCAL LM]" + SPACING_CODE,
        INITIAL_STEPS_WITH_SECURITY_PLGN : "[INITIAL STEPS WITH SECURITY PLUGIN]" + SPACING_CODE, //
        RESTART_INDIVIDUAL_PLGN_SERVICES : "[RESTART INDIVIDUAL PLUGIN]" + SPACING_CODE, //
        CHECK_LICENSE : "[CHECK LICENSE]" + SPACING_CODE,
        CREATE_DEFAULT_USER_FOR_EC : "[CREATE DEFAULT USER]" + SPACING_CODE,//
        REGISTER_EC_WITH_NOTIFICATIONMNGR : "[REGISTER EC WITH NM]" + SPACING_CODE,
        SYNC_WITH_PORTAL : "[SYNC WITH PORTAL]" + SPACING_CODE,
        GET_HIERARCHY_TREE : "[GET HIERARCHY TREE INFO]" + SPACING_CODE,
        POST_CALL_SYNC_WITH_PORTAL : "[POST CALL SYNC WITH PORTAL]" + SPACING_CODE,
        CLOSE_SERVER : "[CLOSE PORTAL SERVER]" + SPACING_CODE,
        SERVER_START:'## EP SERVER STARTED WITH SECURE CONNECTION :',
        PASSPH_ENCRYPT_ERR:"Certificates passphrse key encryption/decryption failed",
        LISTENING_PORT:'## Portal SERVER LISTENING ON PORT :',
        DEFAULT_USER_DONE:'DONE WITH DEFAULT USER CREATION',
        INITIAL_STEPS_ERR:"ERROR IN DONE INITIAL STEPS ",
        ERR_PLUGIN_INFO:"ERROR WITH ALL DETECTED PLUGIN INFO",
        PASSPH_ENCRYPT_SUCCESS:"Certificates passphrase key encrypted successfully",
        PASSPH_ENCRYPT_EMPTY:"Certificates passphrase key is empty",
        PASS_DECRYPTED_SUCCESS:"####### Database password decryption succefully ",
        PASS_DECRYPTED_FAIL:"Database password decryption failed : ",
        PASS_ENCRYPT_SUCCESS:"Database password encrypted successfully",
        PASS_ENCRYPT_FAIL:"Database password encryption failed : ",
        DB_CONN_SYNC_SUCCESS:"####### Database connected and synced successfully",
        IN_ERROR_HANDLER:'in error handler',
        UNCAUGHT_HEAD:'uncaughtException',
        SOMETHING_WENT_WRONG_IN_CREATE:"### SOMETHING WENT WRONG WHILE CREATING THE SERVER :",
        CERTIFICATE_NOT_FOUND:"### CERTIFICATES NOT FOUND, PLEASE CHECK PATH_TO_CERTIFICATE_FILE AND PATH_TO_KEY_FILE IN ENV",
        CERTIFICATE_PATH_FOUND_EMPTY:"### CERTIFICATES PATH IN ENV FILE FOUND EMPTY",
        ENC_DEC_FAILED:"####### Certificates passphrse key encryption/decryption failed :",
        START_EC_SERVER:"## STARTING EC SERVER:",
        DONE_INITIAL_STEPS:"DONE WITH INITIAL STEPS",
        CERTIFICTAE_PASSPH_DECRY_SUCCESS:"Certificates passphrase key decrypted successfully",
        REQUIRE_ELEVETED_PRIVILEGES:"requires elevated privileges",
        ALREADY_IN_USE:"is already in use",
        SERVER_DOWN:'Server is down',
        LISTENING_ON:"Listening on"




    },

    MSG: {
        EC_INITIALIZED : EC_LOGS_COMMON_MSG.SERVER_INITIALIZED,
        SERVER_STARTED_AT_PORT :  EC_LOGS_COMMON_MSG.SERVER_STARTED_LISTENING_ON + SEMICOLON_SPACE,
        CHECK_ROOT_NODE_AVAILABLE : EC_LOGS_COMMON_MSG.CHECK_ROOT_NODE_AVAILABILITY,
        ROOT_NODE_AVAILABLE_SUCCESS : EC_LOGS_COMMON_MSG.CHECK_ROOT_NODE_AVAILABILITY + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        ROOT_NODE_AVAILABLE_FAILED : EC_LOGS_COMMON_MSG.CHECK_ROOT_NODE_AVAILABILITY + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        DB_SYNC_FAILED : EC_LOGS_COMMON_MSG.SEQUELIZE_SYNC + FAILED_STRING + SEMICOLON_SPACE,
        DB_SYNC_SUCCESS : EC_LOGS_COMMON_MSG.SEQUELIZE_SYNC + FAILED_STRING + SEMICOLON_SPACE,
        DETECT_AVAILABLE_PLUGINS : EC_LOGS_COMMON_MSG.DETECT_AVAILABLE_PLUGINS,
        DETECT_AVAILABLE_PLUGINS_NOT_FOUND : EC_LOGS_COMMON_MSG.PLUGINS_NOT_AVAILABLE,
        CHECK_PLUGINS_STATUS_CONFIG : EC_LOGS_COMMON_MSG.CHECK_PLUGINS_STATUS_CONFIG, //
        REMOVE_FROM_HASH_DISABLE_IN_DB : EC_LOGS_COMMON_MSG.REMOVE_FROM_HASH_DISABLE_IN_DB + SEMICOLON_SPACE, //
        DISABLE_PLGN_SERVCS_IN_HASH : EC_LOGS_COMMON_MSG.DISABLE_PLGN_SERVCS_IN_HASH + SEMICOLON_SPACE, //
        DISABLE_PLGN_SERVCS_IN_DB : EC_LOGS_COMMON_MSG.DISABLE_PLGN_SERVCS_IN_DB + SEMICOLON_SPACE, //
        DISABLE_PLGN_SERVCS_IN_DB_SUCCESS : EC_LOGS_COMMON_MSG.DISABLE_PLGN_SERVCS_IN_DB + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE, //
        DISABLE_PLGN_SERVCS_IN_DB_FAILED : EC_LOGS_COMMON_MSG.DISABLE_PLGN_SERVCS_IN_DB + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,//
        DETECT_AVAILABLE_PLUGINS_CONFIG_INFO :  EC_LOGS_COMMON_MSG.PLUGINS_WITH_CONFIGINFO + SEMICOLON_SPACE,//
        REQUIRED_PLUGINS_FOR_EC : EC_LOGS_COMMON_MSG.CHECK_REQUIRED_PLGNS,
        REQUIRED_PLUGINS_FOR_EC_FAILED : EC_LOGS_COMMON_MSG.CHECK_REQUIRED_PLGNS + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        REQUIRED_PLUGINS_FOR_EC_SUCCESS : EC_LOGS_COMMON_MSG.CHECK_REQUIRED_PLGNS + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        CHECK_SECURITY_PLUGIN_AVAILABILE : EC_LOGS_COMMON_MSG.CHECK_SECURITY_PLUGIN_AVAILABILE ,
        SECURITY_PLUGIN_FOUND : EC_LOGS_COMMON_MSG.SECURITY_PLUGIN_FOUND ,
        SECURITY_PLUGIN_NTFOUND : EC_LOGS_COMMON_MSG.SECURITY_PLUGIN_NTFOUND ,
        REGISTER_EC_APP_WITH_SECURITY_PLGN : EC_LOGS_COMMON_MSG.REGISTER_EC_APP_WITH_SECURITY_PLGN ,
        REGISTER_SAVE_EC_APP_WITH_SECURITY_PLGN_SUCCESS : EC_LOGS_COMMON_MSG.REGISTER_SAVE_EC_APP_WITH_SECURITY_PLGN + SPACING_CODE +SUCCESS_STRING,
        REGISTER_SAVE_EC_APP_WITH_SECURITY_PLGN_FAILED : EC_LOGS_COMMON_MSG.REGISTER_SAVE_EC_APP_WITH_SECURITY_PLGN + SPACING_CODE +FAILED_STRING,
        LM_PLGN_FOUND : EC_LOGS_COMMON_MSG.LM_PLGN_FOUND,
        LM_PLGN_NTFOUND : EC_LOGS_COMMON_MSG.LM_PLGN_NTFOUND,
        CHECK_PLGN_CONFIG_IN_DB : EC_LOGS_COMMON_MSG.CHECK_PLGN_CONFIG_IN_DB + SEMICOLON_SPACE, //
        CHECK_PLGN_CONFIG_RESP_FROM_DB : EC_LOGS_COMMON_MSG.CHECK_PLGN_CONFIG_RESP_FROM_DB + SEMICOLON_SPACE, //
        UPDATE_PLGN_CONFIG_IN_DB : EC_LOGS_COMMON_MSG.UPDATE_PLGN_CONFIG_IN_DB + SEMICOLON_SPACE, //
        UPDATE_PLGN_CONFIG_IN_DB_SUCCESS : EC_LOGS_COMMON_MSG.UPDATE_PLGN_CONFIG_IN_DB + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE, //
        UPDATE_PLGN_CONFIG_IN_DB_FAILED : EC_LOGS_COMMON_MSG.UPDATE_PLGN_CONFIG_IN_DB + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE, //
        SAVE_NEW_PLGN_CONFIG_IN_DB : EC_LOGS_COMMON_MSG.SAVE_NEW_PLGN_CONFIG_IN_DB + SEMICOLON_SPACE, //
        SAVE_NEW_PLGN_CONFIG_IN_DB_SUCCESS : EC_LOGS_COMMON_MSG.SAVE_NEW_PLGN_CONFIG_IN_DB + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE, //
        SAVE_NEW_PLGN_CONFIG_IN_DB_FAILED : EC_LOGS_COMMON_MSG.SAVE_NEW_PLGN_CONFIG_IN_DB + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE, //
        GET_LM_CONFIG_INFO : EC_LOGS_COMMON_MSG.GET_LM_CONFIG_INFO + SEMICOLON_SPACE, //
        GET_LM_CONFIG_INFO_SUCCESS : EC_LOGS_COMMON_MSG.GET_LM_CONFIG_INFO + SUCCESS_STRING + SEMICOLON_SPACE,
        GET_LM_CONFIG_INFO_FAILED : EC_LOGS_COMMON_MSG.GET_LM_CONFIG_INFO + FAILED_STRING + SEMICOLON_SPACE,
        LM_NOT_AVAILABLE_IN_DB : EC_LOGS_COMMON_MSG.LM_NOT_AVAILABLE_IN_DB + SEMICOLON_SPACE,
        DUMP_PORTAL_LICENSES_TO_LM : EC_LOGS_COMMON_MSG.DUMP_PORTAL_LICENSES_TO_LM + SEMICOLON_SPACE,
        DUMP_PORTAL_LICENSES_TO_LM_API_RESP_SUCCESS : EC_LOGS_COMMON_MSG.DUMP_PORTAL_LICENSES_TO_LM_API_RESP + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        DUMP_PORTAL_LICENSES_TO_LM_API_RESP_FAILED : EC_LOGS_COMMON_MSG.DUMP_PORTAL_LICENSES_TO_LM_API_RESP + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        API_TO_GET_LICENSE_FROM_PORTAL : EC_LOGS_COMMON_MSG.API_TO_GET_LICENSE_FROM_PORTAL + SEMICOLON_SPACE,
        APP_REGISTARTION_WITH_SECURITY_PLUGIN : EC_LOGS_COMMON_MSG.APP_REGISTARTION_WITH_SECURITY_PLUGIN + SEMICOLON_SPACE, //
        APP_REGISTARTION_WITH_SECURITY_PLUGIN_SUCCESS : EC_LOGS_COMMON_MSG.APP_REGISTARTION_WITH_SECURITY_PLUGIN + SPACING_CODE + SUCCESS_STRING, //
        APP_REGISTARTION_WITH_SECURITY_PLUGIN_FAILED : EC_LOGS_COMMON_MSG.APP_REGISTARTION_WITH_SECURITY_PLUGIN + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE, //
        CHECK_IS_NEW_REGISTRED_APP : EC_LOGS_COMMON_MSG.CHECK_IS_NEW_REGISTRED_APP ,//
        CHECK_IS_NEW_REGISTRED_APP_FAILED : EC_LOGS_COMMON_MSG.CHECK_IS_NEW_REGISTRED_APP +FAILED_STRING + SEMICOLON_SPACE , //
        REGISTERED_APP_FOUND : EC_LOGS_COMMON_MSG.REGISTERED_APP_FOUND, //
        REGISTERED_APP_NTFOUND : EC_LOGS_COMMON_MSG.REGISTERED_APP_NTFOUND,//
        SAVE_REGISTERED_APP : EC_LOGS_COMMON_MSG.SAVE_REGISTERED_APP,//
        SAVE_REGISTERED_APP_SUCCESS : EC_LOGS_COMMON_MSG.SAVE_REGISTERED_APP + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        SAVE_REGISTERED_APP_FAILED : EC_LOGS_COMMON_MSG.SAVE_REGISTERED_APP + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE, //
        RESTART_INDVIDUAL_PLUGIN_SERVICES : EC_LOGS_COMMON_MSG.RESTART_INDVIDUAL_PLUGIN_SERVICES +  SEMICOLON_SPACE, //
        CHECK_LICENSE_FOR_PLUGIN : EC_LOGS_COMMON_MSG.CHECK_LICENSE_FOR_PLUGIN +  SEMICOLON_SPACE,
        CHECK_LICENSE_FOR_PLUGIN_SUCCESS : EC_LOGS_COMMON_MSG.CHECK_LICENSE_FOR_PLUGIN + SPACING_CODE + SUCCESS_STRING +  SEMICOLON_SPACE,
        CHECK_LICENSE_FOR_PLUGIN_FAILED : EC_LOGS_COMMON_MSG.CHECK_LICENSE_FOR_PLUGIN + SPACING_CODE + FAILED_STRING +  SEMICOLON_SPACE,
        GET_APP_ID_SECRET_FAILED : EC_LOGS_COMMON_MSG.GET_APP_ID_SECRET + FAILED_STRING +  SEMICOLON_SPACE,
        GET_LIST_OF_PLUGINS_FROM_DB : EC_LOGS_COMMON_MSG.GET_LIST_OF_PLUGINS_FROM_DB +  SEMICOLON_SPACE,
        GET_ROOT_NODES_FROM_DB : EC_LOGS_COMMON_MSG.GET_ROOT_NODES_FROM_DB +  SEMICOLON_SPACE,
        GET_PLUGIN_CONFIG_INFO : EC_LOGS_COMMON_MSG.GET_PLUGIN_CONFIG_INFO + SEMICOLON_SPACE ,
        GET_PLUGIN_CONFIG_INFO_SUCCESS : EC_LOGS_COMMON_MSG.GET_PLUGIN_CONFIG_INFO + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE , //
        GET_PLUGIN_CONFIG_INFO_FAILED : EC_LOGS_COMMON_MSG.GET_PLUGIN_CONFIG_INFO + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE , //
        CREATE_API_TO_POST_EC_INFO : EC_LOGS_COMMON_MSG.CREATE_API_TO_POST_EC_INFO  + SEMICOLON_SPACE ,//
        GET_SECURITY_PLGN_FROM_DB : EC_LOGS_COMMON_MSG.GET_SECURITY_PLGN_FROM_DB  + SEMICOLON_SPACE , //
        CREATE_DEFAULT_USER_REQ_BODY : EC_LOGS_COMMON_MSG.CREATE_DEFAULT_USER_REQ_BODY  + SEMICOLON_SPACE ,//
        REGISTER_WITH_NM_API_RESPONSE_SUCCESS : EC_LOGS_COMMON_MSG.REGISTER_WITH_NM_API_RESPONSE + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE ,
        REGISTER_WITH_NM_API_RESPONSE_FAILED : EC_LOGS_COMMON_MSG.REGISTER_WITH_NM_API_RESPONSE + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE ,
        ALREADY_APP_REGISTERED_WITH_NM_WITH_MSG_PROFILE_KEY : EC_LOGS_COMMON_MSG.ALREADY_APP_REGISTERED_WITH_NM_WITH_MSG_PROFILE_KEY  + SEMICOLON_SPACE ,
        INITIAL_STEPS_WITH_LM : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_LICENSEMNGR,
        INITIAL_STEPS_WITH_LM_SUCCESS : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_LICENSEMNGR + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        INITIAL_STEPS_WITH_LM_FAILED : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_LICENSEMNGR + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        INITIAL_STEPS_WITH_SECURITY_PLGN : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_SECURITY_PLUGIN ,//
        INITIAL_STEPS_WITH_SECURITY_PLGN_SUCCESS : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_SECURITY_PLUGIN + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        INITIAL_STEPS_WITH_SECURITY_PLGN_FAILED : EC_LOGS_COMMON_MSG.INITIAL_STEPS_WITH_SECURITY_PLUGIN + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        CREATE_DEFAULT_USER_FOR_EC : EC_LOGS_COMMON_MSG.CREATE_DEFAULT_USR_FOR_EC,
        CREATE_DEFAULT_USER_FOR_EC_SUCCESS : EC_LOGS_COMMON_MSG.CREATE_DEFAULT_USR_FOR_EC + SUCCESS_STRING + SPACING_CODE + SEMICOLON_SPACE,
        CREATE_DEFAULT_USER_FOR_EC_FAILED : EC_LOGS_COMMON_MSG.CREATE_DEFAULT_USR_FOR_EC + FAILED_STRING + SPACING_CODE + SEMICOLON_SPACE,
        REGISTER_EC_WITH_NM_SERVER_ALERTS : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_SERVER_ALERTS,
        REGISTER_EC_WITH_NM_SERVER_ALERTS_SUCCESS : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_SERVER_ALERTS + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        REGISTER_EC_WITH_NM_SERVER_ALERTS_FAILED : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_SERVER_ALERTS + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        REGISTER_EC_WITH_NM_AUTH_ALERTS : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_AUTH_ALERTS,
        REGISTER_EC_WITH_NM_AUTH_ALERTS_SUCCESS : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_AUTH_ALERTS + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        REGISTER_EC_WITH_NM_AUTH_ALERTS_FAILED : EC_LOGS_COMMON_MSG.RGSTR_EC_WITH_NOTIFICATIONMNGR_AUTH_ALERTS + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        GET_HIERARCHY_TREE_INFO_SUCCESS : EC_LOGS_COMMON_MSG.GET_HIERARCHY_TREE_INFO + SPACING_CODE + SUCCESS_STRING + SEMICOLON_SPACE,
        GET_HIERARCHY_TREE_INFO_FAILED : EC_LOGS_COMMON_MSG.GET_HIERARCHY_TREE_INFO + SPACING_CODE + FAILED_STRING + SEMICOLON_SPACE,
        SYNC_PORTAL_EVERY_INTERVAL : EC_LOGS_COMMON_MSG.SYNC_PORTAL_FOR_EVERY + SEMICOLON_SPACE,
        PRODUCT_SAVED_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.PRODUCT_SAVED_SUCCESSFULLY,
        PRODUCT_UPDATED_SCUCCESSFULLY_MSG:EC_LOGS_COMMON_MSG.PRODUCT_UPDATED_SUCCESSFULLY,
        PRODUCT_DELETED_SUCCESSFULLY_MGS:EC_LOGS_COMMON_MSG.PRODUCT_DELT_SUCCESSFULLY,
        ADD_PRODUCT_API_MSG: EC_LOGS_COMMON_MSG.ADD_PRODUCT_API,
        EDIT_PRODUCT_API_MSG:EC_LOGS_COMMON_MSG.EDIT_PRODUCT_API,
        VALIDATING_PRODUCT_PARTNO_VERSION_MSG:EC_LOGS_COMMON_MSG.VALIDATING_PRODUCT_PARTNO_VERSION,
        PRODUCT_ALREADY_EXISTS_MSG: EC_LOGS_COMMON_MSG.PRODUCT_ALREADY_EXISTS,
        PRODUCT_VALIDATED_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.PRODUCT_VALIDATED_SUCCESSFULLY,
        DELETE_PRODUCT_API_MSG: EC_LOGS_COMMON_MSG.DELETE_PRODUCT_API,
        IN_GET_PRODUCT_LIST_MSG: EC_LOGS_COMMON_MSG.IN_GET_PRODUCT_LIST,
        PRODUCT_LIST_SENT_SUCCESSFULLY_MSG:EC_LOGS_COMMON_MSG.PRODUCT_LIST_SENT_SUCCESSFULLY,
        PUST_DATA_TO_LICENSE_MANAGER_API_MSG:EC_LOGS_COMMON_MSG.PUST_DATA_TO_LICENSE_MANAGER_API,
        FEATURE_LIST_SENT_SUCCESSFULLY_MSG:EC_LOGS_COMMON_MSG.FEATURE_LIST_SENT_SUCCESSFULLY,
        IN_CERTIFICATE_VALIDATE_API_MSG: EC_LOGS_COMMON_MSG.IN_CERTIFICATE_VALIDATE_API,
        CERTIFICATE_VALIDATED_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.CERTIFICATE_VALIDATED_SUCCESSFULLY,
        ADD_CUSTOMER_API_MSG: EC_LOGS_COMMON_MSG.ADD_CUSTOMER_API,
        CUSTOMER_DETAILE_SAVE_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.CUSTOMER_DETAILE_SAVE_SUCCESSFULLY,
        IN_GET_FILE_DATA_MSG:EC_LOGS_COMMON_MSG.IN_GET_FILE_DATA,
        CUSTOMER_DETAILS_FOR_GEN_KEY_MSG: EC_LOGS_COMMON_MSG.CUSTOMER_DETAILS_FOR_GEN_KEY,
        FILE_GENERATED_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.FILE_GENERATED_SUCCESSFULLY,
        IN_UPDATE_CUST_API_MSG:EC_LOGS_COMMON_MSG.IN_UPDATE_CUST_API,
        NO_CHANGE_IN_CERT_FILE_MSG: EC_LOGS_COMMON_MSG.NO_CHANGE_IN_CERT_FILE,
        CUST_UPDATE_SUCCESSFULLY_MSG: EC_LOGS_COMMON_MSG.CUST_UPDATE_SUCCESSFULLY,
        IN_POST_HIERARCHY_MSG: EC_LOGS_COMMON_MSG.IN_POST_HIERARCHY,
        IN_GET_CUSTOMER_LIST_MSG:EC_LOGS_COMMON_MSG.IN_GET_CUSTOMER_LIST,
        IN_GET_TOKEN_MSG: EC_LOGS_COMMON_MSG.IN_GET_TOKEN,
        IN_GET_LICENSED_PRODUCT_MSG:EC_LOGS_COMMON_MSG.IN_GET_LICENSED_PRODUCT,
        IN_GENERATE_TOKEN_MSG: EC_LOGS_COMMON_MSG.IN_GENERATE_TOKEN,
        TOKEN_SUCCESSFULLY_VERIFIED_MSG:EC_LOGS_COMMON_MSG.TOKEN_SUCCESSFULLY_VERIFIED,
        IN_VALIDATE_CUST_MSG:EC_LOGS_COMMON_MSG.IN_VALIDATE_CUST,
        CUSTOMER_VALIDATE_SUCCESS_MSG: EC_LOGS_COMMON_MSG.CUSTOMER_VALIDATE_SUCCESS,
        IN_GET_HIERARCHY_TREE_MSG: EC_LOGS_COMMON_MSG.IN_GET_HIERARCHY_TREE,
        IN_GET_CUSTOMER_LIST:EC_LOGS_COMMON_MSG.IN_GET_CUSTOMER_LIST,
        IN_CREATE_FAKE_ROOT_MSG:EC_LOGS_COMMON_MSG.IN_CREATE_FAKE_ROOT,
        IN_GET_LAS_INFO_MSG:EC_LOGS_COMMON_MSG.IN_GET_LAS_INFO,
        PLUGIN_DATA_SENT_SUCCESS_MSG:EC_LOGS_COMMON_MSG.PLUGIN_DATA_SENT_SUCCESS,
        IN_GENERATE_PRODUCT_FOR_LM_MSG:EC_LOGS_COMMON_MSG.IN_GENERATE_PRODUCT_FOR_LM,
        IN_GENERATE_FEATURE_FOR_LM_MSG:EC_LOGS_COMMON_MSG.IN_GENERATE_FEATURE_FOR_LM,
        IN_LOGIN_MSG:EC_LOGS_COMMON_MSG.IN_LOGIN,
        IN_GET_AUTH_SECURITY_PLGN_MSG:EC_LOGS_COMMON_MSG.IN_GET_AUTH_SECURITY_PLGN,
        CREATE_SESSION_MSG:EC_LOGS_COMMON_MSG.CREATE_SESSION,
        ERROR_CREATE_SESSION_MSG:EC_LOGS_COMMON_MSG.ERROR_CREATE_SESSION,
        IN_LOGOUT_MSG:EC_LOGS_COMMON_MSG.IN_LOGOUT,
        IN_VALIDATE_APP_WITH_ISAS_MSG:EC_LOGS_COMMON_MSG.IN_VALIDATE_APP_WITH_ISAS,
        IN_GET_APP_PRE_INFO_MSG:EC_LOGS_COMMON_MSG.IN_GET_APP_PRE_INFO,
        IN_CHECK_VALIDATOR_MSG:EC_LOGS_COMMON_MSG.IN_CHECK_VALIDATOR,
        LAST_COMMUNICATED_UPDATED_MSG:EC_LOGS_COMMON_MSG.LAST_COMMUNICATED_UPDATED


    }

}

module.exports = {
    COMMON_MSGS: SERVER_COMMON_ERROR_MSGS,
    ERROR: API_ERROR_CODES_AND_MSGS,
    // API_ERROR_CODES: API_ERROR_CODES,
    API_SCHEMA_ERROR_CODES: API_SCHEMA_ERROR_CODES,
    API_SCHEMA_ERROR: API_SCHEMA_ERROR_CODES_AND_MSGS,
    SUCCESS: API_SUCCESS_CODE_AND_MSG,
    EC_LOGS : EC_LOGS
}